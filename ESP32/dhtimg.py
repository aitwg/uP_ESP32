# Complete project details at https://RandomNerdTutorials.com
# https://github.com/micropython/micropython/blob/master/drivers/display/ssd1306.py
# http://yhhuang1966.blogspot.com/2017/08/micropython-on-esp8266-ssd1306.html
# https://manytools.org/hacker-tools/image-to-byte-array/
from machine import Pin, I2C
import ssdoled
import framebuf
import time, ntptime
import dht
import network

# SSID & Password for your WiFi AP.
ssid = 'MEDIA_LINK'
password = '89124138af'

station = network.WLAN(network.STA_IF)

station.active(True)
station.connect(ssid, password)

while station.isconnected() == False:
  pass

print('Connection successful')
print(station.ifconfig())

try:
    ntptime.settime()
except:
    pass

# ESP32 Pin assignment 
i2c = I2C(-1, scl=Pin(22), sda=Pin(21))

oled_width = 128
oled_height = 64
oled = ssdoled.SSD1306_I2C(oled_width, oled_height, i2c)

android = [ 0x0, 0x0, 0x8, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 
  0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x60, 0x0, 0x0, 
  0x0, 0x0, 0x2, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3f, 
  0xfc, 0x80, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0x80, 0x0, 0x0, 
  0x0, 0x0, 0x3, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xff, 
  0xff, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xff, 0xff, 0xf8, 0x0, 0x0, 
  0x0, 0x0, 0x3f, 0xff, 0xff, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x7e, 0xff, 
  0xff, 0x7e, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x7f, 0xfe, 0x3f, 0x0, 0x0, 
  0x0, 0x0, 0xfc, 0x7f, 0xfe, 0x3f, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x0, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0, 
  0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0, 0x0, 0x3, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x0, 0x0, 0x3, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0, 
  0x0, 0x3, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 
  0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x80, 
  0x7, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xe0, 0x7, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xe0, 0xf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 
  0xf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 0xf, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xf0, 0xf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 
  0xf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 0xf, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xf0, 0xf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 
  0xf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 0xf, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xf0, 0xf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 
  0xf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 0xf, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xf0, 0xf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 
  0xf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 0xf, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xf0, 0xf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 
  0xf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf0, 0x7, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xe0, 0x7, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xe0, 
  0x3, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xc0, 0x1, 0xc3, 0xff, 0xff, 
  0xff, 0xff, 0xc3, 0x80, 0x0, 0x3, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0, 
  0x0, 0x3, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0, 0x0, 0x3, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0, 
  0x0, 0x1, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0, 0x0, 0x0, 0x7f, 0xff, 
  0xff, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf8, 0x1f, 0xe0, 0x0, 0x0, 
  0x0, 0x0, 0x7, 0xf8, 0x1f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf8, 
  0x1f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf8, 0x1f, 0xe0, 0x0, 0x0, 
  0x0, 0x0, 0x7, 0xf8, 0x1f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf8, 
  0x1f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf8, 0x1f, 0xe0, 0x0, 0x0, 
  0x0, 0x0, 0x7, 0xf8, 0x1f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf8, 
  0x1f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xf8, 0x1f, 0xc0, 0x0, 0x0, 
  0x0, 0x0, 0x3, 0xf0, 0xf, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe0, 
  0x7, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]


sensor = dht.DHT22(Pin(14))
temp = hum = 0

def read_sensor():
  global temp, hum
  try:
    sensor.measure()
    temp = sensor.temperature()
    hum = sensor.humidity()
    if (isinstance(temp, float) and isinstance(hum, float)) or (isinstance(temp, int) and isinstance(hum, int)):
      msg = (b'{0:3.1f},{1:3.1f}'.format(temp, hum))
      #temp = temp * (9/5) + 32.0
      hum = round(hum, 2)
    else:
      return('Invalid sensor readings.')
  except OSError as e:
    return('Failed to read sensor.')

andBuf = bytearray(android)
fb2 = framebuf.FrameBuffer(andBuf, 64, 64, framebuf.MONO_HLSB)

while True:
    time.sleep(1)
    utc_epoch=time.mktime(time.localtime())
    Y,M,D,H,m,S,W,DY=time.localtime(utc_epoch + 28800)
    YMD='%s-%s-%s' % (str(Y),str(M),str(D))  
    Hm='%s:%s:%s' % (str(H),str(m),str(S))

    oled.fill(0)
    read_sensor()
    tempMsg = "T :"+str(temp)
    humMsg  = "H :"+str(hum)
    print(tempMsg+" "+humMsg)
    print("\n")
    oled.text(YMD,65,10)
    oled.text(Hm, 65, 20)           
    oled.blit(fb2, 0, 0)
    oled.text(tempMsg,65, 35)
    oled.text(humMsg, 65, 45)
    oled.show()
    time.sleep(1)